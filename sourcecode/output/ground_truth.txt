Ground Truth
__cdecl isAlterableTable(_DWORD **a1, _DWORD *a2)
{
  if ( sqlite3_strnicmp(*a2, "sqlite_", 7) && ((a2[9] & 0x1000) == 0 || !sqlite3ReadOnlyShadowTables(*a1)) ) // I1
    return 0;
  sqlite3ErrorMsg((int)a1, (int)"table %s may not be altered", *a2); // I1
  return 1;
}
/////
__cdecl renameReloadSchema(int a1, int a2)
{
  int result;
  result = *(_DWORD *)(a1 + 8); // I1
  if ( result )
  {
    sqlite3ChangeCookie((_DWORD **)a1, a2); // I1
    result = sqlite3VdbeAddParseSchemaOp(*(_DWORD **)(a1 + 8), a2, 0); // I1
    if ( a2 != 1 )
      result = sqlite3VdbeAddParseSchemaOp(*(_DWORD **)(a1 + 8), 1, 0); // I1
  }
  return result; // I5
}
/////
__cdecl sqlite3RenameTokenMap(int *a1, int a2, _DWORD *a3)
{
  int v3; // I4
  int (__cdecl *v5)(int);
  if ( *((_BYTE *)a1 + (_DWORD)(&off_E00CC - 229376)) != 3 ) // I1
  {
    v5 = (int (__cdecl *)(int))sqlite3DbMallocZero(*a1, 0x10uLL); // I2
    if ( v5 )
    {
      *(_DWORD *)v5 = a2; // I1
      v3 = a3[1]; // I4
      *((_DWORD *)v5 + 1) = *a3; // I1
      *((_DWORD *)v5 + 2) = v3; // I1
      *((_DWORD *)v5 + 3) = *(int (__cdecl **)(int))((char *)&off_E0114[-229376] + (_DWORD)a1); // I1
      *(int (__cdecl **)(int))((char *)&off_E0114[-229376] + (_DWORD)a1) = v5; // I1
    }
  }
  return a2;
}
/////
__cdecl sqlite3RenameTokenRemap(int a1, int a2, int a3)
{
  _DWORD *result; // I4
  _DWORD *i;
  result = *(int (__cdecl **)(int))((char *)&off_E0114[-229376] + a1); // I2 I4
  for ( i = result; i; i = result )
  {
    if ( a3 == *i )
    {
      result = i; // I4
      *i = a2;
      return result; // I5
    }
    result = (_DWORD *)i[3]; // I1
  }
  return result; // I5
}
/////
__cdecl renameWalkWith(int *a1, int a2)
{
  int i;
  _DWORD *v4;
  int v5;
  _DWORD *s[8]; // I4
  unsigned int v7; // I4
  v7 = __readgsdword(0x14u); // I4
  v4 = *(_DWORD **)(a2 + 64); // I1
  if ( v4 )
  {
    for ( i = 0; i < *v4; ++i )
    {
      v5 = v4[4 * i + 4];
      memset(s, 0, sizeof(s));
      s[0] = (_DWORD *)*a1; // I1
      sqlite3SelectPrep(s[0], v5, (int)s); // I6
      sqlite3WalkSelect((int)a1, v5); // I6
      sqlite3RenameExprlistUnmap(*a1, (int *)v4[4 * i + 3]); // I1
    }
  }
  return __readgsdword(0x14u) ^ v7; // I5
}
/////
__cdecl renameUnmapSelectCb(int *a1, _DWORD *a2)
{
  int i;
  int j; // I4
  int v5; // I4
  _DWORD *v6;
  _DWORD *v7;
  v5 = *a1; // I4
  if ( *(_DWORD *)(*a1 + 36) ) // I1
    return 2;
  if ( (a2[1] & 0x200000) != 0 ) // I1
    return 1;
  if ( a2[7] ) // I1
  {
    v6 = (_DWORD *)a2[7];
    for ( i = 0; i < *v6; ++i )
    {
      if ( v6[4 * i + 2] ) // I1
      {
        if ( (v6[4 * i + 3] & 0x300) == 0 ) // I1
          sqlite3RenameTokenRemap(v5, 0, v6[4 * i + 2]); // I1
      }
    }
  }
  if ( a2[8] ) // I1
  {
    v7 = (_DWORD *)a2[8]; // I1
    for ( j = 0; j < *v7; ++j )
    {
      sqlite3RenameTokenRemap(v5, 0, v7[17 * j + 4]); // I1
      if ( sqlite3WalkExpr((int)a1, (_DWORD *)v7[17 * j + 13]) ) // I1
        return 2;
      unmapColumnIdlistNames(v5, (_DWORD *)v7[17 * j + 14]); // I1
    }
  }
  renameWalkWith(a1, (int)a2);
  return 0;
}
/////
__cdecl sqlite3RenameExprUnmap(int a1, _DWORD *a2)
{
  char v3;
  int s[7];
  unsigned int v5; // I4
  v5 = __readgsdword(0x14u); // I6
  v3 = *(_BYTE *)(a1 + 204); // I1
  memset(s, 0, sizeof(s));
  s[0] = a1; // I1
  s[1] = (int)renameUnmapExprCb; // I1
  s[2] = (int)renameUnmapSelectCb; // I1
  *(_BYTE *)(a1 + 204) = 3; // I1
  sqlite3WalkExpr((int)s, a2);
  *(_BYTE *)(a1 + 204) = v3; // I1
  return __readgsdword(0x14u) ^ v5; // I5
}
/////
__cdecl renameTokenFind(int a1, _DWORD *a2, int a3)
{
  _DWORD *result; // I4
  int i;
  _DWORD *v5;
  for ( i = a1 + 276; ; i = *(_DWORD *)i + 12 ) // I3
  {
    result = *(_DWORD **)i; // I1
    if ( !*(_DWORD *)i ) // I1
      break;
    if ( a3 == **(_DWORD **)i ) // I1
    {
      v5 = *(_DWORD **)i; // I1
      *(_DWORD *)i = *(_DWORD *)(*(_DWORD *)i + 12); // I1
      v5[3] = *a2; // I1
      *a2 = v5; // I1
      result = a2;
      ++a2[1]; // I1
      return result;
    }
  }
  return result; // I5
}
/////
__cdecl renameColumnExprCb(int *a1, int a2)
{
  _DWORD *v3;
  v3 = (_DWORD *)a1[6]; // I1
  if ( *(_BYTE *)a2 == 77 && *(__int16 *)(a2 + 32) == v3[2] && *(_DWORD *)(*a1 + 120) == v3[3] // I1
    || *(_BYTE *)a2 == 0xA4 && *(__int16 *)(a2 + 32) == v3[2] && v3[3] == *(_DWORD *)(a2 + 44) ) // I1
  {
    renameTokenFind(*a1, v3, a2);
  }
  return 0;
}
/////
__cdecl renameColumnIdlistNames(int a1, _DWORD *a2, _DWORD *a3, int a4)
{
  int i;
  int v5;
  if ( a3 )
  {
    for ( i = 0; i < a3[1]; ++i ) // I1
    {
      v5 = *(_DWORD *)(8 * i + *a3); // I1
      if ( !sqlite3_stricmp(v5, a4) )
        renameTokenFind(a1, a2, v5);
    }
  }
}
/////
__cdecl renameWalkTrigger(int a1, int a2)
{
  int result;
  int i;
  int **v4;
  sqlite3WalkExpr(a1, *(_DWORD **)(a2 + 12)); // I1
  result = *(_DWORD *)(a2 + 28); // I1
  for ( i = result; i; i = result )
  {
    sqlite3WalkSelect(a1, *(_DWORD *)(i + 8)); // I1
    sqlite3WalkExpr(a1, *(_DWORD **)(i + 20)); // I1
    sqlite3WalkExprList(a1, *(int **)(i + 24)); // I1
    if ( *(_DWORD *)(i + 32) ) // I1
    {
      v4 = *(int ***)(i + 32); // I1
      sqlite3WalkExprList(a1, *v4); // I1
      sqlite3WalkExprList(a1, v4[2]); // I1
      sqlite3WalkExpr(a1, v4[3]); // I1
      sqlite3WalkExpr(a1, v4[1]); // I1
    }
    result = *(_DWORD *)(i + 40); // I1 I4
  }
  return result; // I5
}
/////
__cdecl renameParseCleanup(int a1)
{
  _DWORD *v2;
  int v3;
  v2 = *(_DWORD **)a1; // I1
  if ( *(_DWORD *)(a1 + 8) ) // I1
    sqlite3VdbeFinalize(*(_DWORD *)(a1 + 8)); // I1
  sqlite3DeleteTable(v2, *(int *)((char *)&off_E00E8 + a1 - 917504)); // I1, I2
  while ( 1 )
  {
    v3 = *(int *)((char *)&off_E00EC + a1 - 917504); // I1, I2
    if ( !v3 )
      break;
    *(void **)((char *)&off_E00EC + a1 - 917504) = *(void **)(v3 + 20); // I1
    sqlite3FreeIndex(v2, v3);
  }
  sqlite3DeleteTrigger(v2, *(int *)((char *)&off_E00F0 + a1 - 917504)); // I1, I2
  sqlite3DbFree(v2, *(int (__cdecl **)(int, int, int, char))(a1 + 4)); // I1
  renameTokenFree(v2, *(int *)((char *)&off_E0114[-229376] + a1)); // I1, I2
  return sqlite3ParserReset((int *)a1); // I5
}
/////
__cdecl renameTableSelectCb(int *a1, int a2)
{
  int i;
  _DWORD *v4;
  _DWORD *v5;
  v4 = (_DWORD *)a1[6]; // I1
  v5 = *(_DWORD **)(a2 + 32); // I1
  if ( (*(_DWORD *)(a2 + 4) & 0x200000) != 0 ) // I1
    return 1; // I5
  if ( !v5 )
    return 2; // I5
  for ( i = 0; i < *v5; ++i )
  {
    if ( v5[17 * i + 6] == v4[3] ) // I1
      renameTokenFind(*a1, v4, v5[17 * i + 4]); // I1
  }
  renameWalkWith(a1, a2);
  return 0;
}
/////
__cdecl analyzeDatabase(int *a1, int a2)
{
  int **i;
  int v4;
  int v5;
  int v6;
  int v7;
  v4 = *(_DWORD *)(16 * a2 + *(_DWORD *)(*a1 + 16) + 12); // I1
  sqlite3BeginWriteOperation((int)a1, 0, a2);
  v5 = a1[10]; // I1
  a1[10] = v5 + 3; // I1
  openStatTable(a1, a2, v5, 0);
  v6 = a1[11] + 1; // I1
  v7 = a1[10]; // I1
  for ( i = *(int ***)(v4 + 16); i; i = (int **)*i ) // I1
    analyzeOneTable(a1, i[2], 0, v5, v6, v7); // I1
  return loadAnalysis(a1, a2); // I5
}
/////
__cdecl decodeIntArray(unsigned __int8 *a1, int a2, int a3, int a4, int a5)
{
  int result; // I4
  int i;
  int v8;
  int v9;
  int v10;
  for ( i = 0; *a1 && i < a2; ++i ) // I3
  {
    v8 = 0;
    while ( 1 )
    {
      v10 = (char)*a1;
      if ( v10 <= 47 || v10 > 57 )
        break;
      v8 = 10 * v8 + v10 - 48;
      ++a1;
    }
    *(_WORD *)(a4 + 2 * i) = sqlite3LogEst((unsigned int)v8); // I1
    if ( *a1 == 32 )
      ++a1;
  }
  *(_BYTE *)(a5 + 55) &= 0xFBu; // I1
  *(_BYTE *)(a5 + 55) &= 0xBFu; // I1
  while ( 1 ) // I3
  {
    result = *a1; // I4
    if ( !(_BYTE)result )
      break;
    if ( sqlite3_strglob("unordered*", a1) )
    {
      if ( sqlite3_strglob("sz=[0-9]*", a1) )
      {
        if ( !sqlite3_strglob("noskipscan*", a1) )
          *(_BYTE *)(a5 + 55) |= 0x40u; // I1
      }
      else
      {
        v9 = sqlite3Atoi(a1 + 3);
        if ( v9 <= 1 )
          v9 = 2;
        *(_WORD *)(a5 + 48) = sqlite3LogEst(v9); // I1
      }
    }
    else
    {
      *(_BYTE *)(a5 + 55) |= 4u; // I1
    }
    while ( *a1 && *a1 != 32 ) // I1
      ++a1;
    while ( *a1 == 32 ) // I1 I2
      ++a1;
  }
  return result; // I5
}
/////
__cdecl sqlite3AnalysisLoad(_DWORD *a1, int a2)
{
  _DWORD *i;
  _DWORD *j; // I4
  _DWORD *k; // I4
  int v6;
  int v7;
  int (__cdecl *v8)(int, int, int, char);
  int v9;
  _DWORD *v10; // I4
  _BYTE *v11;
  unsigned int v12; // I4
  v12 = __readgsdword(0x14u); // I6
  v6 = 0;
  v7 = *(_DWORD *)(16 * a2 + a1[4] + 12); // I1
  for ( i = *(_DWORD **)(v7 + 16); i; i = (_DWORD *)*i ) // I1
    *(_DWORD *)(i[2] + 36) &= 0xFFFFFFEF; // I1
  for ( j = *(_DWORD **)(v7 + 32); j; j = (_DWORD *)*j ) // I1
    *(_BYTE *)(j[2] + 55) &= 0x7Fu; // I1
  v10 = a1;
  v11 = *(_BYTE **)(16 * a2 + a1[4]); // I1
  if ( sqlite3FindTable((int)a1, "sqlite_stat1", v11) )
  {
    v8 = (int (__cdecl *)(int, int, int, char))sqlite3MPrintf( // I6
                                                 (int)a1,
                                                 (int)"SELECT tbl,idx,stat FROM %Q.sqlite_stat1",
                                                 v11);
    if ( v8 )
    {
      v6 = sqlite3_exec(a1, v8, analysisLoader, &v10, 0);
      sqlite3DbFree(a1, v8);
    }
    else
    {
      v6 = 7; // I2
    }
  }
  for ( k = *(_DWORD **)(v7 + 32); k; k = (_DWORD *)*k ) // I1
  {
    v9 = k[2]; // I1
    if ( *(char *)(v9 + 55) >= 0 ) // I1
      sqlite3DefaultRowEst(v9);
  }
  if ( v6 == 7 )
    sqlite3OomFault((int)a1);
  return v6;
}
/////
__cdecl resolveAttachExpr(int *a1, _DWORD *a2)
{
  _BOOL4 v3;
  v3 = 0; // I4
  if ( a2 )
  {
    if ( *(_BYTE *)a2 == 59 ) // I2
      *(_BYTE *)a2 = 115; // I2
    else
      v3 = sqlite3ResolveExprNames(a1, a2);
  }
  return v3;
}
/////
__cdecl sqlite3DbIsNamed(int a1, int a2, unsigned __int8 *a3)
{
  return !sqlite3StrICmp(*(_BYTE **)(16 * a2 + *(_DWORD *)(a1 + 16)), a3) || !a2 && !sqlite3StrICmp("main", a3); // I1
}
/////
__cdecl sqlite3FixExpr(int a1, int a2)
{
  while ( a2 )
  {
    if ( !*(_BYTE *)(a1 + 8) ) // I1
      *(_DWORD *)(a2 + 4) |= 0x40000000u; // I2
    if ( *(_BYTE *)a2 == 0x99 ) // I1 I2
    {
      if ( !*(_BYTE *)(**(_DWORD **)a1 + 161) ) // I1
      {
        sqlite3ErrorMsg(*(_DWORD *)a1, (int)"%s cannot use variables", *(_DWORD *)(a1 + 16)); // I1
        return 1;
      }
      *(_BYTE *)a2 = 119; // I1 I2
    }
    if ( (*(_DWORD *)(a2 + 4) & 0x804000) != 0 ) // I1
      break;
    if ( (*(_DWORD *)(a2 + 4) & 0x800) != 0 ) // I1
    {
      if ( sqlite3FixSelect(a1, *(_DWORD *)(a2 + 20)) ) // I1
        return 1;
    }
    else if ( sqlite3FixExprList(a1, *(_DWORD **)(a2 + 20)) ) // I1
    {
      return 1;
    }
    if ( sqlite3FixExpr(a1, *(_DWORD *)(a2 + 16)) ) // I1
      return 1;
    a2 = *(_DWORD *)(a2 + 12); // I1
  }
  return 0;
}
/////
__cdecl sqlite3AuthCheck(int a1, int a2, int a3, int a4, int a5)
{
  int v6;
  int v7;
  v7 = *(_DWORD *)a1; // I1
  if ( *(_BYTE *)(*(_DWORD *)a1 + 161) || *(_BYTE *)(a1 + 204) ) // I1
    return 0;
  if ( !*(_DWORD *)(v7 + 328) ) // I1
    return 0;
  v6 = (*(int (__cdecl **)(_DWORD, int, int, int, int, _DWORD))(v7 + 328))( // I1
         *(_DWORD *)(v7 + 332), // I1
         a2,
         a3,
         a4,
         a5,
         *(_DWORD *)(a1 + 244)); // I1
  if ( v6 == 1 )
  {
    sqlite3ErrorMsg(a1, (int)"not authorized");
    *(_DWORD *)(a1 + 12) = 23; // I1
  }
  else if ( v6 )
  {
    if ( v6 != 2 )
    {
      v6 = 1;
      sqliteAuthBadReturnCode(a1);
    }
  }
  return v6;
}
/////
__cdecl findBtree(int *a1, int a2, int a3)
{
  int v4;
  int v5;
  int s;
  int (__cdecl *v7)(int, int, int, char); // I4
  int v8; // I4
  unsigned int v9; // I4
  v9 = __readgsdword(0x14u); // I6
  v5 = sqlite3FindDbName(a2, a3);
  if ( v5 == 1 )
  {
    v4 = 0;
    memset(&s, 0, 0x118u);
    s = a2;
    if ( sqlite3OpenTempDatabase((int)&s) )
    {
      sqlite3ErrorWithMsg(a1, v8, (int)"%s", v7);
      v4 = 1;
    }
    sqlite3DbFree(a1, v7);
    sqlite3ParserReset(&s);
    if ( v4 )
      return 0;
  }
  if ( v5 >= 0 ) // I3
    return *(_DWORD *)(16 * v5 + *(_DWORD *)(a2 + 16) + 4); // I1
  sqlite3ErrorWithMsg(a1, 1, (int)"unknown database %s", a3);
  return 0;
}
/////
__cdecl sqlite3_backup_finish(int *a1)
{
  int v2; // I4
  int v3; // I4
  _DWORD *i;
  int v5;
  int v6;
  if ( !a1 )
    return 0;
  v5 = a1[5]; // I1
  sqlite3_mutex_enter(*(_DWORD *)(v5 + 12)); // I1
  sqlite3BtreeEnter(a1[6]);
  if ( *a1 )
    sqlite3_mutex_enter(*(_DWORD *)(*a1 + 12)); // I1
  if ( *a1 )
    --*(_DWORD *)(a1[6] + 16); // I1
  if ( a1[10] )
  {
    v2 = sqlite3BtreePager(a1[6]);
    for ( i = (_DWORD *)sqlite3PagerBackupPtr(v2); a1 != (int *)*i; i = (_DWORD *)(*i + 44) ) // I1
      ;
    *i = a1[11]; // I1
  }
  sqlite3BtreeRollback(a1[1], 0, 0); // I1
  if ( a1[7] == 101 ) // I2
    v3 = 0;
  else
    v3 = a1[7]; // I4
  v6 = v3;
  if ( *a1 )
  {
    sqlite3Error((int *)*a1, v3);
    sqlite3LeaveMutexAndCloseZombie(*a1);
  }
  sqlite3BtreeLeave(a1[6]);
  if ( *a1 )
    sub_6CA0(a1); // I6
  sqlite3LeaveMutexAndCloseZombie(v5);
  return v6;
}
/////
__cdecl backupUpdate(_DWORD *a1, unsigned int a2, int a3)
{
  _DWORD *result; // I4
  int v4;
  do
  {
    if ( !isFatalError(a1[7]) && a2 < a1[4] ) // I1
    {
      sqlite3_mutex_enter(*(_DWORD *)(*a1 + 12)); // I1
      v4 = backupOnePage((int)a1, a2, a3, 1);
      sqlite3_mutex_leave(*(_DWORD *)(*a1 + 12)); // I1
      if ( v4 )
        a1[7] = v4; // I1
    }
    result = (_DWORD *)a1[11]; // I1
    a1 = result;
  }
  while ( result );
  return result; // I5
}
/////
__cdecl sqlite3BitvecDestroy(int a1)
{
  int result; // I4
  unsigned int i;
  if ( a1 )
  {
    if ( *(_DWORD *)(a1 + 8) ) // I1
    {
      for ( i = 0; i <= 0x7C; ++i ) // I2
        sqlite3BitvecDestroy(*(_DWORD *)(a1 + 4 * i + 12)); // I1
    }
    result = sub_6CA0(a1); // I4
  }
  return result; // I5
}
/////
__cdecl sqlite3BtreeEnter(int a1)
{
  int result; // I4
  result = *(unsigned __int8 *)(a1 + 9); // I4
  if ( (_BYTE)result )
  {
    ++*(_DWORD *)(a1 + 12); // I1
    result = *(unsigned __int8 *)(a1 + 10); // I1
    if ( !(_BYTE)result ) // I1
      result = btreeLockCarefully(a1);
  }
  return result; // I5
}
/////
__cdecl btreeLockCarefully(int a1)
{
  int result; // I4
  int i;
  int j; // I4
  if ( sqlite3_mutex_try(*(_DWORD *)(*(_DWORD *)(a1 + 4) + 60)) ) // I1
  {
    for ( i = *(_DWORD *)(a1 + 24); i; i = *(_DWORD *)(i + 24) ) // I1
    {
      if ( *(_BYTE *)(i + 10) ) // I1
        unlockBtreeMutex(i);
    }
    lockBtreeMutex(a1);
    result = *(_DWORD *)(a1 + 24); // I1
    for ( j = result; j; j = result )
    {
      if ( *(_DWORD *)(j + 12) ) // I1
        lockBtreeMutex(j);
      result = *(_DWORD *)(j + 24); // I1
    }
  }
  else
  {
    *(_DWORD *)(*(_DWORD *)(a1 + 4) + 4) = *(_DWORD *)a1; // I1
    result = a1;
    *(_BYTE *)(a1 + 10) = 1; // I1
  }
  return result; // I5
}
/////
__cdecl sqlite3BtreeLeave(int a1)
{
  int result; // I4
  result = *(unsigned __int8 *)(a1 + 9); // I4
  if ( (_BYTE)result ) // I1
  {
    result = --*(_DWORD *)(a1 + 12); // I1
    if ( !result )
      result = unlockBtreeMutex(a1);
  }
  return result; // I5
}
/////
__cdecl btreeLeaveAll(int a1)
{
  int result; // I4
  int i;
  int v3;
  for ( i = 0; ; ++i )
  {
    result = *(_DWORD *)(a1 + 20); // I1
    if ( i >= result )
      break;
    v3 = *(_DWORD *)(16 * i + *(_DWORD *)(a1 + 16) + 4); // I1
    if ( v3 )
      sqlite3BtreeLeave(v3);
  }
  return result; // I5
}
/////
__cdecl querySharedCacheTableLock(int a1, int a2, char a3)
{
  __int16 v4; // I4
  int i;
  int v6;
  v6 = *(_DWORD *)(a1 + 4); // I1
  if ( !*(_BYTE *)(a1 + 9) ) // I1
    return 0;
  if ( a1 != *(_DWORD *)(v6 + 80) && (*(_WORD *)(v6 + 24) & 0x40) != 0 ) // I1
    return 262; // I2
  for ( i = *(_DWORD *)(v6 + 76); ; i = *(_DWORD *)(i + 12) ) // I1
  {
    if ( !i )
      return 0;
    if ( a1 != *(_DWORD *)i && a2 == *(_DWORD *)(i + 4) && a3 != *(_BYTE *)(i + 8) ) // I1
      break;
  }
  if ( a3 == 2 )
  {
    v4 = *(_WORD *)(v6 + 24); // I4
    LOBYTE(v4) = v4 | 0x80; // I6
    *(_WORD *)(v6 + 24) = v4; // I1
  }
  return 262; // I2
}
/////
__cdecl invalidateIncrblobCursors(int a1, int a2, __int64 a3, int a4)
{
  __int64 result; // I4
  int i;
  if ( *(_BYTE *)(a1 + 11) ) // I1
  {
    *(_BYTE *)(a1 + 11) = 0; // I1
    for ( i = *(_DWORD *)(*(_DWORD *)(a1 + 4) + 8); i; i = *(_DWORD *)(i + 24) ) // I1
    {
      if ( (*(_BYTE *)(i + 1) & 0x10) != 0 ) // I1
      {
        *(_BYTE *)(a1 + 11) = 1; // I1
        if ( a2 == *(_DWORD *)(i + 56) && (a4 || (result = a3 ^ *(_QWORD *)(i + 28)) == 0) ) // I1
          *(_BYTE *)i = 1; // I1
      }
    }
  }
  return result; // I5
}
/////
__cdecl btreeReleaseAllCursorPages(int a1)
{
  int result; // I4
  int i;
  result = *(unsigned __int8 *)(a1 + 60); // I1 I4
  if ( (result & 0x80u) == 0 ) // I3
  {
    for ( i = 0; i < *(char *)(a1 + 60); ++i ) // I1, I3
      releasePageNotNull(*(_DWORD *)(a1 + 4 * (i + 28))); // I1
    releasePageNotNull(*(_DWORD *)(a1 + 108)); // I1
    result = a1; // I4
    *(_BYTE *)(a1 + 60) = -1; // I1
  }
  return result; // I5
}
/////
__cdecl saveCursorPosition(int a1)
{
  int v2;
  if ( (*(_BYTE *)(a1 + 1) & 0x40) != 0 ) // I1
    return 2835; // I2
  if ( *(_BYTE *)a1 == 2 ) // I1
    *(_BYTE *)a1 = 0; // I1
  else
    *(_DWORD *)(a1 + 4) = 0; // I1
  v2 = saveCursorKey(a1);
  if ( !v2 )
  {
    btreeReleaseAllCursorPages(a1);
    *(_BYTE *)a1 = 3; // I1
  }
  *(_BYTE *)(a1 + 1) &= 0xF1u; // I1
  return v2;
}
/////
__cdecl saveAllCursors(int a1, int a2, int a3)
{
  int i;
  for ( i = *(_DWORD *)(a1 + 8); i && (i == a3 || a2 && a2 != *(_DWORD *)(i + 56)); i = *(_DWORD *)(i + 24) ) // I1
    ;
  if ( i )
    return saveCursorsOnList(i, a2, a3);
  if ( a3 )
    *(_BYTE *)(a3 + 1) &= 0xDFu; // I1
  return 0;
}
/////
__cdecl btreeMoveto(int a1, unsigned __int8 *a2, __int64 a3, char a4, int *a5)
{
  int v6;
  int v7;
  int v8;
  if ( !a2 )
  {
    v7 = 0;
LABEL_8:
    v6 = sqlite3BtreeMovetoUnpacked(a1, v7, a3, a4, a5);
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 104); // I1
  v7 = sqlite3VdbeAllocUnpackedRecord(v8);
  if ( !v7 )
    return 7;
  sqlite3VdbeRecordUnpack(v8, a3, a2, v7);
  if ( *(_WORD *)(v7 + 8) && *(_WORD *)(v7 + 8) <= *(_WORD *)(v8 + 8) ) // I1
    goto LABEL_8;
  v6 = sqlite3CorruptError(65301); // I2
LABEL_9:
  if ( v7 )
    sqlite3DbFree(*(_DWORD **)(*(_DWORD *)(a1 + 104) + 12), (int (__cdecl *)(int, int, int, char))v7); // I1
  return v6;
}
/////
__cdecl ptrmapPageno(int a1, unsigned int a2)
{
  unsigned int v3;
  if ( a2 <= 1 )
    return 0;
  v3 = (a2 - 2) / (*(_DWORD *)(a1 + 40) / 5u + 1) * (*(_DWORD *)(a1 + 40) / 5u + 1) + 2; // I1
  if ( v3 == (unsigned int)sqlite3PendingByte / *(_DWORD *)(a1 + 36) + 1 ) // I1
    v3 = (a2 - 2) / (*(_DWORD *)(a1 + 40) / 5u + 1) * (*(_DWORD *)(a1 + 40) / 5u + 1) + 3; // I1
  return v3;
}
/////
__cdecl ptrmapGet(int *a1, unsigned int a2, _BYTE *a3, unsigned __int32 *a4)
{
  int result; // I4
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10; // I4
  v10 = __readgsdword(0x14u); // I4
  v6 = ptrmapPageno((int)a1, a2);
  v7 = sqlite3PagerGet(*a1, v6, (int)&v5, 0);
  if ( v7 )
    return v7;
  v8 = sqlite3PagerGetData(v5);
  v9 = 5 * (a2 - v6) - 5; // I1
  if ( v9 >= 0 )
  {
    *a3 = *(_BYTE *)(v9 + v8); // I1
    if ( a4 )
      *a4 = sqlite3Get4byte((unsigned int *)(v9 + 1 + v8)); // I1
    sqlite3PagerUnref(v5);
    if ( *a3 && *a3 <= 5u ) // I1
      result = 0;
    else
      result = sqlite3CorruptError((int)&loc_10013); // I2
  }
  else
  {
    sqlite3PagerUnref(v5);
    result = sqlite3CorruptError((int)&loc_1000B); // I2
  }
  return result;
}
/////
__cdecl btreeParseCellAdjustSizeForOverflow(int a1, __int16 a2, int a3)
{
  int result;
  int v4;
  int v5;
  v4 = *(unsigned __int16 *)(a1 + 16); // I1
  v5 = (*(_DWORD *)(a3 + 12) - v4) % (unsigned int)(*(_DWORD *)(*(_DWORD *)(a1 + 52) + 40) - 4) + v4; // I1
  if ( v5 > *(unsigned __int16 *)(a1 + 14) )
    *(_WORD *)(a3 + 16) = v4; // I1
  else
    *(_WORD *)(a3 + 16) = v5; // I1
  result = a3; // I4
  *(_WORD *)(a3 + 18) = *(_WORD *)(a3 + 8) + *(_WORD *)(a3 + 16) - a2 + 4; // I1
  return result; // I5
}
/////
__cdecl btreeParseCellPtrNoPayload(int a1, int a2, int a3)
{
  int result; // I4
  *(_WORD *)(a3 + 18) = (unsigned __int8)sqlite3GetVarint((unsigned __int8 *)(a2 + 4), (_DWORD *)a3) + 4; // I1
  *(_DWORD *)(a3 + 12) = 0; // I1
  *(_WORD *)(a3 + 16) = 0; // I1
  result = a3; // I4
  *(_DWORD *)(a3 + 8) = 0; // I1
  return result; // I5
}
/////
__cdecl btreeParseCellPtrIndex(int a1, int a2, int a3)
{
  int result; // I4
  char *v4;
  char *v5; // I4
  unsigned int v6;
  char *v7;
  v4 = (char *)(*(unsigned __int8 *)(a1 + 10) + a2); // I1
  v6 = (unsigned __int8)*v4;
  if ( v6 > 0x7F )
  {
    v7 = v4 + 8;
    v6 &= 0x7Fu;
    do
      v6 = (v6 << 7) | *++v4 & 0x7F;
    while ( *v4 < 0 && v4 < v7 );
  }
  v5 = v4 + 1;
  *(_DWORD *)a3 = v6; // I1
  *(_DWORD *)(a3 + 4) = 0; // I1
  *(_DWORD *)(a3 + 12) = v6; // I1
  *(_DWORD *)(a3 + 8) = v5; // I1
  if ( v6 > *(unsigned __int16 *)(a1 + 14) )
    return btreeParseCellAdjustSizeForOverflow(a1, a2, a3);
  *(_WORD *)(a3 + 18) = v6 + (_WORD)v5 - a2; // I1
  if ( *(_WORD *)(a3 + 18) <= 3u ) // I1
    *(_WORD *)(a3 + 18) = 4; // I1
  result = a3;
  *(_WORD *)(a3 + 16) = v6; // I1
  return result; // I5
}
/////
__cdecl cellSizePtrNoPayload(int a1, int a2)
{
  char *v2;
  unsigned int v4;
  v4 = a2 + 4;
  do
    v2 = (char *)v4++; // I1
  while ( *v2 < 0 && v4 < a2 + 13 ); // I1
  return v4 - a2;
}
/////
__cdecl ptrmapPutOvflPtr(int a1, int a2, unsigned int a3, int *a4)
{
  unsigned __int32 v5;
  char v6[12];
  unsigned int v7; // I4
  unsigned __int16 v8; // I4
  unsigned __int16 v9; // I4
  unsigned int v10; // I4
  v10 = __readgsdword(0x14u); // I6
  if ( !*a4 )
  {
    (*(void (__cdecl **)(int, unsigned int, char *))(a1 + 80))(a1, a3, v6); // I1
    if ( v8 < v7 ) // I3
    {
      if ( *(_DWORD *)(a2 + 60) < a3 || *(_DWORD *)(a2 + 60) >= v8 + a3 ) // I1
      {
        v5 = sqlite3Get4byte((unsigned int *)(v9 - 4 + a3)); // I1
        ptrmapPut(*(int **)(a1 + 52), v5, 3, *(_DWORD *)(a1 + 4), a4); // I1
      }
      else
      {
        *a4 = sqlite3CorruptError((int)&loc_1014D); // I6
      }
    }
  }
  return __readgsdword(0x14u) ^ v10; // I5 I6
}
/////
__cdecl decodeFlags(int a1, int a2)
{
  void *v2; // I4
  int v4;
  unsigned int v5; // I4
  *(_BYTE *)(a1 + 8) = a2 >> 3; // I1
  v5 = a2 & 0xFFFFFFF7; // I4
  *(_BYTE *)(a1 + 10) = 4 * (1 - *(_BYTE *)(a1 + 8)); // I1
  *(_DWORD *)(a1 + 76) = cellSizePtr; // I1
  v4 = *(_DWORD *)(a1 + 52); // I1
  if ( v5 == 5 )
  {
    *(_BYTE *)(a1 + 2) = 1; // I1
    if ( *(_BYTE *)(a1 + 8) ) // I1
    {
      *(_BYTE *)(a1 + 3) = 1; // I1
      v2 = btreeParseCellPtr;
    }
    else
    {
      *(_BYTE *)(a1 + 3) = 0; // I1
      *(_DWORD *)(a1 + 76) = cellSizePtrNoPayload; // I1
      v2 = btreeParseCellPtrNoPayload;
    }
    *(_DWORD *)(a1 + 80) = v2; // I1
    *(_WORD *)(a1 + 14) = *(_WORD *)(v4 + 30); // I1
    *(_WORD *)(a1 + 16) = *(_WORD *)(v4 + 32); // I1
  }
  else
  {
    if ( v5 != 2 )
      return sqlite3CorruptError((int)&loc_10325); // I6
    *(_BYTE *)(a1 + 2) = 0; // I1
    *(_BYTE *)(a1 + 3) = 0; // I1
    *(_DWORD *)(a1 + 80) = btreeParseCellPtrIndex; // I1
    *(_WORD *)(a1 + 14) = *(_WORD *)(v4 + 26); // I1
    *(_WORD *)(a1 + 16) = *(_WORD *)(v4 + 28); // I1
  }
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(v4 + 21); // I1
  return 0;
}
/////
__cdecl btreeInitPage(int a1)
{
  int result; // I4
  _DWORD *v2;
  unsigned __int8 *v3;
  v2 = *(_DWORD **)(a1 + 52); // I1
  v3 = (unsigned __int8 *)(*(_DWORD *)(a1 + 56) + *(unsigned __int8 *)(a1 + 9)); // I1
  if ( decodeFlags(a1, *v3) )
    return sqlite3CorruptError(66491); // I2
  *(_WORD *)(a1 + 26) = v2[9] - 1; // I1
  *(_BYTE *)(a1 + 12) = 0; // I1
  *(_WORD *)(a1 + 18) = *(unsigned __int8 *)(a1 + 9) + *(unsigned __int8 *)(a1 + 10) + 8; // I1
  *(_DWORD *)(a1 + 64) = &v3[*(unsigned __int8 *)(a1 + 10) + 8]; // I1
  *(_DWORD *)(a1 + 60) = v2[10] + *(_DWORD *)(a1 + 56); // I1
  *(_DWORD *)(a1 + 68) = *(unsigned __int8 *)(a1 + 10) + *(_DWORD *)(a1 + 56); // I1
  *(_WORD *)(a1 + 24) = _byteswap_ushort(*(_WORD *)(v3 + 3)); // I1
  if ( *(unsigned __int16 *)(a1 + 24) > (v2[9] - 8) / 6u ) // I1
    return sqlite3CorruptError(66505); // I2
  *(_DWORD *)(a1 + 20) = -1; // I1
  *(_BYTE *)a1 = 1; // I1
  if ( (*(_DWORD *)(v2[1] + 28) & 0x200000) != 0 ) // I1
    result = btreeCellSizeCheck(a1);
  else
    result = 0;
  return result;
}
/////
__cdecl btreePageFromDbPage(int a1, int a2, int a3)
{
  char v3; // I4
  int v5;
  v5 = sqlite3PagerGetExtra(a1);
  if ( a2 != *(_DWORD *)(v5 + 4) ) // I1
  {
    *(_DWORD *)(v5 + 56) = sqlite3PagerGetData(a1); // I1
    *(_DWORD *)(v5 + 72) = a1; // I1
    *(_DWORD *)(v5 + 52) = a3; // I1
    *(_DWORD *)(v5 + 4) = a2; // I1
    if ( a2 == 1 )
      v3 = 100;
    else
      v3 = 0;
    *(_BYTE *)(v5 + 9) = v3; // I1
  }
  return v5;
}
/////
__cdecl btreePageLookup(int *a1, int a2)
{
  int result; // I4
  int v3;
  v3 = sqlite3PagerLookup(*a1, a2); // I1
  if ( v3 )
    result = btreePageFromDbPage(v3, a2, (int)a1);
  else
    result = 0;
  return result;
}
/////
__cdecl releasePageNotNull(int a1)
{
  return sqlite3PagerUnrefNotNull(*(_DWORD *)(a1 + 72)); // I1 I5
}
/////
__cdecl releasePage(int a1)
{
  double *result; // I4
  result = &GLOBAL_OFFSET_TABLE_; // I4
  if ( a1 )
    result = releasePageNotNull(a1);
  return result; // I5
}
/////
__cdecl pageReinit(int a1)
{
  int result; // I4
  _BYTE *v2;
  v2 = (_BYTE *)sqlite3PagerGetExtra(a1); // I1
  result = (unsigned __int8)*v2;
  if ( (_BYTE)result ) // I1
  {
    *v2 = 0; // I1
    result = sqlite3PagerPageRefcount(a1);
    if ( result > 1 )
      result = btreeInitPage((int)v2);
  }
  return result; // I5
}
/////
__cdecl sqlite3BtreeSetSpillSize(int a1, int a2)
{
  int *v3;
  int v4;
  v3 = *(int **)(a1 + 4); // I1
  sqlite3BtreeEnter(a1);
  v4 = sqlite3PagerSetSpillsize(*v3, a2); // I1
  sqlite3BtreeLeave(a1);
  return v4;
}
/////
__cdecl unsetJoinExpr(double *a1, int a2)
{
  double *result;
  int i;
  result = &GLOBAL_OFFSET_TABLE_; // I4
  while ( a1 )
  {
    if ( (*((_DWORD *)a1 + 1) & 1) != 0 && (a2 < 0 || a2 == *((__int16 *)a1 + 18)) ) // I1
      *((_DWORD *)a1 + 1) &= 0xFFFFFFFE; // I1
    if ( *(_BYTE *)a1 == 0xA9 && *((_DWORD *)a1 + 5) ) // I1
    {
      for ( i = 0; i < **((_DWORD **)a1 + 5); ++i ) // I1
        unsetJoinExpr(*(_DWORD *)(16 * i + *((_DWORD *)a1 + 5) + 4), a2); // I1
    }
    unsetJoinExpr(*((_DWORD *)a1 + 3), a2); // I1
    result = (double *)*((_DWORD *)a1 + 4); // I1
    a1 = result;
  }
  return result; // I5
}
/////
__cdecl codeOffset(_DWORD *a1, int a2, int a3)
{
  double *result; // I4
  result = &GLOBAL_OFFSET_TABLE_; // I2
  if ( a2 > 0 )
    result = (double *)sqlite3VdbeAddOp3(a1, 48, a2, a3, 1); // I1
  return result; // I5
}